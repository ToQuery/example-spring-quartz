
spring:
  application:
    name: example-spring-quartz

  jpa:
    open-in-view: false
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  #连接池配置
  datasource:
    url: jdbc:postgresql://postgres.example-spring-quartz.orb.local:5432/example_spring_quartz
    username: postgres
    password: postgres

  quartz:
    auto-startup: true
    job-store-type: jdbc

    scheduler-name: example-spring-quartz
    # 程序结束时会等待quartz相关的内容结束
    wait-for-jobs-to-complete-on-shutdown: true
    # QuartzScheduler启动时更新己存在的Job,这样就不用每次修改targetObject后删除qrtz_job_details表对应记录
    overwrite-existing-jobs: true
    jdbc:
      initialize-schema: ALWAYS
    properties:
      org:
        quartz:
          scheduler:
            # instanceName: quartz-demo-app
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应 QRTZ_SCHEDULER_STATE INSTANCE_NAME字段
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore #持久化配置
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate # 由于StdJDBCDelegate在读取BLOB时存在问题，需要使用与数据库相对应的驱动。
            #driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
            tablePrefix: QRTZ_ #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
            acquireTriggersWithinLock: true
            useProperties: false
          threadPool:
            class: org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor # org.quartz.impl.jdbcjobstore.JobStoreTX
            threadCount: 10 # 并发数
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
          plugin:
            shutdownHook:
              class: org.quartz.plugins.management.ShutdownHookPlugin
              cleanShutdown: true


#============================================================================# 配置JobStore#============================================================================# JobDataMaps是否都为String类型，默认falseorg.quartz.jobStore.useProperties=false
# 表的前缀，默认QRTZ_org.quartz.jobStore.tablePrefix = QRTZ_
# 是否加入集群org.quartz.jobStore.isClustered = true
# 调度实例失效的检查时间间隔 msorg.quartz.jobStore.clusterCheckinInterval = 5000
# 当设置为"true"时，此属性告诉Quartz 在非托管JDBC连接上调用setTransactionIsolation（Connection.TRANSACTION_READ_COMMITTED）。org.quartz.jobStore.txIsolationLevelReadCommitted = true
# 数据保存方式为数据库持久化org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
# 数据库代理类，一般org.quartz.impl.jdbcjobstore.StdJDBCDelegate可以满足大部分数据库org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#============================================================================# Scheduler 调度器属性配置#============================================================================# 调度标识名 集群中每一个实例都必须使用相同的名称org.quartz.scheduler.instanceName = ClusterQuartz# ID设置为自动获取 每一个必须不同org.quartz.scheduler.instanceId= AUTO
#============================================================================# 配置ThreadPool#============================================================================# 线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 指定线程数，一般设置为1-100直接的整数，根据系统资源配置org.quartz.threadPool.threadCount = 5
# 设置线程的优先级(可以是Thread.MIN_PRIORITY（即1）和Thread.MAX_PRIORITY（这是10）之间的任何int 。默认值为Thread.NORM_PRIORITY（5）。)org.quartz.threadPool.threadPriority = 5

